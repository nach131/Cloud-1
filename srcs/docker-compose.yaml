x-web_base:: &web_base
    image: web_base:1.1.0
    build:
      context: ./requirements/web    # image: nginx:latest
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      - proxy
      - letsencrypt
    networks:
      - cloud

services:

  mariadb:
    image: mariadb:10.11
    container_name: ${PMA_HOST}
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${WORDPRESS_DB_NAME}
      - MYSQL_USER=${WORDPRESS_DB_USER}
      - MYSQL_PASSWORD=${WORDPRESS_DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - dbdata:/var/lib/mysql
    networks:
      - cloud

  proxy:
    container_name: proxy
    image: jwilder/nginx-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - certs-data:/etc/nginx/certs:ro
      - html:/usr/share/nginx/html
      - acme:/etc/acme.sh
      - ${TOMA}/data/logs/proxy:/var/log/nginx
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy
    networks:
     - cloud

  logrotate:
    image: logrotate:1.0.0
    container_name: logrotate
    build:
      context: ./requirements/logrotate
    volumes:
      - ${TOMA}/data/logs/proxy:/var/log/nginx
    restart: always
    networks:
      - cloud

  letsencrypt:
    container_name: letsencrypt
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: unless-stopped
    environment:
      - NGINX_PROXY_CONTAINER=proxy
      - ACME_CA_URI=https://acme-staging-v02.api.letsencrypt.org/directory # ⚠️ para las pruebas
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs-data:/etc/nginx/certs:rw
      - vhostd:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - acme:/etc/acme.sh
    networks:
      - cloud

  wordpress:
    image: wordpress:6.8.3-php8.3-apache
    container_name: wordpress
    depends_on:
      - ${PMA_HOST}
    environment:
      - WORDPRESS_DB_HOST=${PMA_HOST}
      - WORDPRESS_DB_USER=${WORDPRESS_DB_USER}
      - WORDPRESS_DB_PASSWORD=${WORDPRESS_DB_PASSWORD}
      - WORDPRESS_DB_NAME=${WORDPRESS_DB_NAME}
      - VIRTUAL_HOST=${DOMAIN},www.${DOMAIN}
      - LETSENCRYPT_HOST=${DOMAIN},www.${DOMAIN}
      - DOMAIN=${DOMAIN}
      - LETSENCRYPT_EMAIL=nacho@enunpimpam.com
    expose:
      - "80"
    volumes:
      - wp_files:/var/www/html
    networks:
      - cloud

  web-nasa:
    <<: *web_base
    container_name: web-nasa
    environment:
      - VIRTUAL_HOST=${NASA}.${DOMAIN},www.${NASA}.${DOMAIN}
      - LETSENCRYPT_HOST=${NASA}.${DOMAIN},www.${NASA}.${DOMAIN}
      - DOMAIN=${NASA}
      - LETSENCRYPT_EMAIL=nacho@enunpimpam.com
    volumes:
      - www-nasa:/usr/share/nginx/html:ro
      - ${TOMA}/data/logs/nasa:/var/log/nginx

  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin:5.2.3
    restart: always
    depends_on:
      - ${PMA_HOST}
    environment:
      - PMA_HOST=${PMA_HOST}
      # - PMA_USER=${WORDPRESS_DB_USER}
      # - PMA_PASSWORD=${WORDPRESS_DB_PASSWORD}
      - UPLOAD_LIMIT=512M
      - VIRTUAL_HOST=${PHPMYADMIN}.${DOMAIN},www.${PHPMYADMIN}.${DOMAIN}
      - LETSENCRYPT_HOST=${PHPMYADMIN}.${DOMAIN},www.${PHPMYADMIN}.${DOMAIN}
      - LETSENCRYPT_EMAIL=nacho@enunpimpam.com
    expose:
      - "80"
    networks:
      - cloud

  # adminer:
  #   container_name: adminer
  #   build: ./requirements/adminer
  #   restart: always
  #   ports:
  #     - "8080"
  #   networks:
  #     - cloud
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
  #     - ADMINER_DEFAULT_SERVER=${PMA_HOST}
  #     - ADMINER_HOST=${PMA_HOST}
  #     - VIRTUAL_HOST=${ADMINER}.${DOMAIN},www.${ADMINER}.${DOMAIN}
  #     - LETSENCRYPT_HOST=${ADMINER}.${DOMAIN},www.${ADMINER}.${DOMAIN}
  #     - LETSENCRYPT_EMAIL=nacho@enunpimpam.com

volumes:
  vhostd:
  acme:
  html:
  certs-data:
    driver: local
    driver_opts:
      type: none
      device: ${TOMA}/data/certs
      o: bind

  dbdata:
      driver: local
      driver_opts:
          type: none
          device: ${TOMA}/data/mysql
          o: bind

  wp_files:
    driver: local
    driver_opts:
        type: none
        device: ${TOMA}/data/wordpress
        o: bind

  www-nasa:
    driver: local
    driver_opts:
      type: none
      device: ${TOMA}/data/nasa
      o: bind

networks:
  cloud:
    driver: bridge


# docker inspect phpmyadmin:latest | grep -i version

# docker exec proxy bash -c "cat /etc/nginx/conf.d/default.conf | grep phpmyadmin"